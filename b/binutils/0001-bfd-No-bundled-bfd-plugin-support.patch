From d192645268875130c2ef1392622fdeabc2ee4972 Mon Sep 17 00:00:00 2001
From: "William A. Kennington III" <william@wkennington.com>
Date: Thu, 15 Aug 2019 11:47:54 -0700
Subject: [PATCH 1/3] bfd: No bundled bfd-plugin support

NIX_STORE paths are immutable so we don't need to search for plugins
anyway because it will always fail in the default configuration.
---
 bfd/plugin.c | 69 ++--------------------------------------------------
 1 file changed, 2 insertions(+), 67 deletions(-)

diff --git a/bfd/plugin.c b/bfd/plugin.c
index 139f772168f..d6849ecd293 100644
--- a/bfd/plugin.c
+++ b/bfd/plugin.c
@@ -366,78 +366,13 @@ register_ld_plugin_object_p (const bfd_target *(*object_p) (bfd *))
 static int
 load_plugin (bfd *abfd)
 {
-  /* The intent was to search ${libdir}/bfd-plugins for plugins, but
-     unfortunately the original implementation wasn't precisely that
-     when configuring binutils using --libdir.  Search in the proper
-     path first, then the old one for backwards compatibility.  */
-  static const char *path[]
-    = { LIBDIR "/bfd-plugins", BINDIR "/../lib/bfd-plugins" };
-  struct stat last_st;
-  int found = 0;
-  unsigned int i;
-
   if (!has_plugin)
-    return found;
+    return 0;
 
   if (plugin_name)
     return try_load_plugin (plugin_name, abfd, &has_plugin);
 
-  if (plugin_program_name == NULL)
-    return found;
-
-  /* Try not to search the same dir twice, by looking at st_dev and
-     st_ino for the dir.  If we are on a file system that always sets
-     st_ino to zero or the actual st_ino is zero we might waste some
-     time, but that doesn't matter too much.  */
-  last_st.st_dev = 0;
-  last_st.st_ino = 0;
-  for (i = 0; i < sizeof (path) / sizeof (path[0]); i++)
-    {
-      char *plugin_dir = make_relative_prefix (plugin_program_name,
-					       BINDIR,
-					       path[i]);
-      if (plugin_dir)
-	{
-	  struct stat st;
-	  DIR *d;
-
-	  if (stat (plugin_dir, &st) == 0
-	      && S_ISDIR (st.st_mode)
-	      && !(last_st.st_dev == st.st_dev
-		   && last_st.st_ino == st.st_ino
-		   && st.st_ino != 0)
-	      && (d = opendir (plugin_dir)) != NULL)
-	    {
-	      struct dirent *ent;
-
-	      last_st.st_dev = st.st_dev;
-	      last_st.st_ino = st.st_ino;
-	      while ((ent = readdir (d)) != NULL)
-		{
-		  char *full_name;
-
-		  full_name = concat (plugin_dir, "/", ent->d_name, NULL);
-		  if (stat (full_name, &st) == 0 && S_ISREG (st.st_mode))
-		    {
-		      int valid_plugin;
-
-		      found = try_load_plugin (full_name, abfd, &valid_plugin);
-		      if (has_plugin <= 0)
-			has_plugin = valid_plugin;
-		    }
-		  free (full_name);
-		  if (found)
-		    break;
-		}
-	      closedir (d);
-	    }
-	  free (plugin_dir);
-	}
-      if (found)
-	break;
-    }
-
-  return found;
+  return 0;
 }
 
 
-- 
2.23.0.700.g56cf767bdb-goog

