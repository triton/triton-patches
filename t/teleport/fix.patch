From 2c3203b30a562c51a83b522ec925fa74855827b4 Mon Sep 17 00:00:00 2001
From: "William A. Kennington III" <william@wkennington.com>
Date: Tue, 3 Oct 2017 12:10:23 -0700
Subject: [PATCH] fix

---
 lib/auth/apiserver.go      | 4 +++-
 lib/auth/clt.go            | 4 +++-
 lib/auth/tun.go            | 6 +++---
 lib/client/api.go          | 6 +-----
 lib/client/client.go       | 2 +-
 lib/reversetunnel/agent.go | 2 +-
 lib/reversetunnel/srv.go   | 6 +++---
 lib/srv/sshserver.go       | 6 +++---
 lib/utils/utils.go         | 3 ---
 9 files changed, 18 insertions(+), 21 deletions(-)

diff --git a/lib/auth/apiserver.go b/lib/auth/apiserver.go
index 7d197d51..d4698851 100644
--- a/lib/auth/apiserver.go
+++ b/lib/auth/apiserver.go
@@ -39,6 +39,8 @@ import (
 
 	"github.com/jonboulle/clockwork"
 	"github.com/tstranex/u2f"
+
+	"github.com/golang/protobuf/proto"
 )
 
 type APIConfig struct {
@@ -1449,7 +1451,7 @@ func (s *APIServer) postSessionSlice(auth ClientI, w http.ResponseWriter, r *htt
 		return nil, trace.Wrap(err)
 	}
 	var slice events.SessionSlice
-	if err := slice.Unmarshal(data); err != nil {
+	if err := proto.Unmarshal(data, slice); err != nil {
 		return nil, trace.BadParameter("failed to unmarshal %v", err)
 	}
 	if err := auth.PostSessionSlice(slice); err != nil {
diff --git a/lib/auth/clt.go b/lib/auth/clt.go
index 675312d2..ef0e7e29 100644
--- a/lib/auth/clt.go
+++ b/lib/auth/clt.go
@@ -41,6 +41,8 @@ import (
 
 	log "github.com/sirupsen/logrus"
 	"github.com/tstranex/u2f"
+
+	"github.com/golang/protobuf/proto"
 )
 
 const (
@@ -1152,7 +1154,7 @@ func (c *Client) PostSessionChunk(namespace string, sid session.ID, reader io.Re
 // The data is POSTed to HTTP server as a simple binary body (no encodings of any
 // kind are needed)
 func (c *Client) PostSessionSlice(slice events.SessionSlice) error {
-	data, err := slice.Marshal()
+	data, err := proto.Marshal(slice)
 	if err != nil {
 		return trace.Wrap(err)
 	}
diff --git a/lib/auth/tun.go b/lib/auth/tun.go
index d17eef51..b813563c 100644
--- a/lib/auth/tun.go
+++ b/lib/auth/tun.go
@@ -144,8 +144,8 @@ func NewTunnel(addr utils.NetAddr,
 	if err != nil {
 		return nil, err
 	}
-	tunnel.userCertChecker = ssh.CertChecker{IsAuthority: tunnel.isUserAuthority}
-	tunnel.hostCertChecker = ssh.CertChecker{IsAuthority: tunnel.isHostAuthority}
+	tunnel.userCertChecker = ssh.CertChecker{IsUserAuthority: tunnel.isUserAuthority}
+	tunnel.hostCertChecker = ssh.CertChecker{IsHostAuthority: tunnel.isHostAuthority}
 	return tunnel, nil
 }
 
@@ -221,7 +221,7 @@ func (s *AuthTunnel) HandleNewChan(_ net.Conn, sconn *ssh.ServerConn, nch ssh.Ne
 
 // isHostAuthority is called during checking the client key, to see if the signing
 // key is the real host CA authority key.
-func (s *AuthTunnel) isHostAuthority(auth ssh.PublicKey) bool {
+func (s *AuthTunnel) isHostAuthority(auth ssh.PublicKey, principal string) bool {
 	domainName, err := s.authServer.GetDomainName()
 	if err != nil {
 		return false
diff --git a/lib/client/api.go b/lib/client/api.go
index 0653fc70..9a41ff9f 100644
--- a/lib/client/api.go
+++ b/lib/client/api.go
@@ -85,10 +85,6 @@ func (p *ForwardedPort) ToString() string {
 	return net.JoinHostPort(p.SrcIP, sport) + ":" + net.JoinHostPort(p.DestHost, dport)
 }
 
-// HostKeyCallback is called by SSH client when it needs to check
-// remote host key or certificate validity
-type HostKeyCallback func(host string, ip net.Addr, key ssh.PublicKey) error
-
 // Config is a client config
 type Config struct {
 	// Username is the Teleport account username (for logging into Teleport proxies)
@@ -152,7 +148,7 @@ type Config struct {
 	// HostKeyCallback will be called to check host keys of the remote
 	// node, if not specified will be using CheckHostSignature function
 	// that uses local cache to validate hosts
-	HostKeyCallback HostKeyCallback
+	HostKeyCallback ssh.HostKeyCallback
 
 	// KeyDir defines where temporary session keys will be stored.
 	// if empty, they'll go to ~/.tsh
diff --git a/lib/client/client.go b/lib/client/client.go
index edba3a1a..27140f9a 100644
--- a/lib/client/client.go
+++ b/lib/client/client.go
@@ -46,7 +46,7 @@ type ProxyClient struct {
 	hostLogin       string
 	proxyAddress    string
 	proxyPrincipal  string
-	hostKeyCallback utils.HostKeyCallback
+	hostKeyCallback ssh.HostKeyCallback
 	authMethod      ssh.AuthMethod
 	siteName        string
 	clientAddr      string
diff --git a/lib/reversetunnel/agent.go b/lib/reversetunnel/agent.go
index 6be46c1f..590e4b19 100644
--- a/lib/reversetunnel/agent.go
+++ b/lib/reversetunnel/agent.go
@@ -52,7 +52,7 @@ type Agent struct {
 	clientName      string
 	broadcastClose  *utils.CloseBroadcaster
 	disconnectC     chan bool
-	hostKeyCallback utils.HostKeyCallback
+	hostKeyCallback ssh.HostKeyCallback
 	authMethods     []ssh.AuthMethod
 	accessPoint     auth.AccessPoint
 }
diff --git a/lib/reversetunnel/srv.go b/lib/reversetunnel/srv.go
index 0cddf15a..a2eaf132 100644
--- a/lib/reversetunnel/srv.go
+++ b/lib/reversetunnel/srv.go
@@ -125,8 +125,8 @@ func NewServer(addr utils.NetAddr, hostSigners []ssh.Signer,
 	if err != nil {
 		return nil, err
 	}
-	srv.hostCertChecker = ssh.CertChecker{IsAuthority: srv.isHostAuthority}
-	srv.userCertChecker = ssh.CertChecker{IsAuthority: srv.isUserAuthority}
+	srv.hostCertChecker = ssh.CertChecker{IsHostAuthority: srv.isHostAuthority}
+	srv.userCertChecker = ssh.CertChecker{IsUserAuthority: srv.isUserAuthority}
 	srv.srv = s
 	return srv, nil
 }
@@ -186,7 +186,7 @@ func (s *server) HandleNewChan(conn net.Conn, sconn *ssh.ServerConn, nch ssh.New
 
 // isHostAuthority is called during checking the client key, to see if the signing
 // key is the real host CA authority key.
-func (s *server) isHostAuthority(auth ssh.PublicKey) bool {
+func (s *server) isHostAuthority(auth ssh.PublicKey, principal string) bool {
 	keys, err := s.getTrustedCAKeys(services.HostCA)
 	if err != nil {
 		log.Errorf("failed to retrieve trusted keys, err: %v", err)
diff --git a/lib/srv/sshserver.go b/lib/srv/sshserver.go
index 266b5f4a..1b96d2a5 100644
--- a/lib/srv/sshserver.go
+++ b/lib/srv/sshserver.go
@@ -264,7 +264,7 @@ func New(addr utils.NetAddr,
 	if err != nil {
 		return nil, trace.Wrap(err)
 	}
-	s.certChecker = ssh.CertChecker{IsAuthority: s.isAuthority}
+	s.certChecker = ssh.CertChecker{IsUserAuthority: s.isUserAuthority}
 
 	for _, o := range options {
 		if err := o(s); err != nil {
@@ -586,9 +586,9 @@ func (s *Server) fetchRoleSet(teleportUser string, clusterName string) (services
 	return roles, err
 }
 
-// isAuthority is called during checking the client key, to see if the signing
+// isUserAuthority is called during checking the client key, to see if the signing
 // key is the real CA authority key.
-func (s *Server) isAuthority(cert ssh.PublicKey) bool {
+func (s *Server) isUserAuthority(cert ssh.PublicKey) bool {
 	// find cert authority by it's key
 	cas, err := s.authService.GetCertAuthorities(services.UserCA, false)
 	if err != nil {
diff --git a/lib/utils/utils.go b/lib/utils/utils.go
index b873d071..ef2f9637 100644
--- a/lib/utils/utils.go
+++ b/lib/utils/utils.go
@@ -30,7 +30,6 @@ import (
 	"github.com/gravitational/teleport"
 	"github.com/gravitational/trace"
 	"github.com/pborman/uuid"
-	"golang.org/x/crypto/ssh"
 )
 
 // SplitHostPort splits host and port and checks that host is not empty
@@ -45,8 +44,6 @@ func SplitHostPort(hostname string) (string, string, error) {
 	return host, port, nil
 }
 
-type HostKeyCallback func(hostID string, remote net.Addr, key ssh.PublicKey) error
-
 func ReadPath(path string) ([]byte, error) {
 	s, err := filepath.Abs(path)
 	if err != nil {
-- 
2.14.2

