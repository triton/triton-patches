From 64100c2f19a837a5e811d2e41035ed33f251bc1f Mon Sep 17 00:00:00 2001
From: "William A. Kennington III" <wak@google.com>
Date: Tue, 3 Jan 2017 19:49:06 -0800
Subject: [PATCH 2/3] libcpp: Enforce purity for time functions

---
 libcpp/macro.c | 78 ++++++++++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 68 insertions(+), 10 deletions(-)

diff --git a/libcpp/macro.c b/libcpp/macro.c
index ba60f225c36..3b1c8767622 100644
--- a/libcpp/macro.c
+++ b/libcpp/macro.c
@@ -352,9 +352,39 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 		   of the current source file. The string constant 
 		   looks like "Sun Sep 16 01:03:52 1973".  */
 		struct tm *tb = NULL;
-		struct stat *st = _cpp_get_file_stat (file);
-		if (st)
-		  tb = localtime (&st->st_mtime);
+
+		/* Allow the date and time to be set externally by an exported
+		   environment variable to enable reproducible builds. */
+		if (enforce_purity)
+		  {
+		    char *source_date_epoch = getenv ("SOURCE_DATE_EPOCH");
+		    if (source_date_epoch == NULL)
+		      tb = 1;
+		    else
+		      {
+			errno = 0;
+			tt = (time_t) strtol (source_date_epoch, NULL, 10);
+			if (errno == 0)
+			  {
+			    tb = gmtime (&tt);
+			    if (tb == NULL)
+			      cpp_error (pfile, CPP_DL_ERROR,
+					 "SOURCE_DATE_EPOCH=\"%s\" is not a valid date",
+					 source_date_epoch);
+			  }
+			else
+			  cpp_error (pfile, CPP_DL_ERROR,
+				     "SOURCE_DATE_EPOCH=\"%s\" is not a valid number",
+				     source_date_epoch);
+		     }
+		  }
+		else
+		  {
+		    struct stat *st = _cpp_get_file_stat (file);
+		    if (st)
+		      tb = localtime (&st->st_mtime);
+		  }
+
 		if (tb)
 		  {
 		    char *str = asctime (tb);
@@ -452,13 +482,41 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 	  time_t tt;
 	  struct tm *tb = NULL;
 
-	  /* (time_t) -1 is a legitimate value for "number of seconds
-	     since the Epoch", so we have to do a little dance to
-	     distinguish that from a genuine error.  */
-	  errno = 0;
-	  tt = time(NULL);
-	  if (tt != (time_t)-1 || errno == 0)
-	    tb = localtime (&tt);
+	  /* Allow the date and time to be set externally by an exported
+	     environment variable to enable reproducible builds. */
+	  if (enforce_purity)
+	    {
+	      char *source_date_epoch = getenv ("SOURCE_DATE_EPOCH");
+	      if (source_date_epoch == NULL)
+		tb = 1;
+	      else
+		{
+		  errno = 0;
+		  tt = (time_t) strtol (source_date_epoch, NULL, 10);
+		  if (errno == 0)
+		    {
+		      tb = gmtime (&tt);
+		      if (tb == NULL)
+			cpp_error (pfile, CPP_DL_ERROR,
+				   "SOURCE_DATE_EPOCH=\"%s\" is not a valid date",
+				   source_date_epoch);
+		    }
+		  else
+		    cpp_error (pfile, CPP_DL_ERROR,
+			       "SOURCE_DATE_EPOCH=\"%s\" is not a valid number",
+			       source_date_epoch);
+		}
+	    }
+	  else
+	    {
+	    /* (time_t) -1 is a legitimate value for "number of seconds
+	       since the Epoch", so we have to do a little dance to
+	       distinguish that from a genuine error.  */
+	    errno = 0;
+	    tt = time(NULL);
+	    if (tt != (time_t)-1 || errno == 0)
+	      tb = localtime (&tt);
+	  }
 
 	  if (tb)
 	    {
-- 
2.11.0

