From 7d57907da1e10d6b7bd8a5a608a2a31aa00daf2f Mon Sep 17 00:00:00 2001
From: "William A. Kennington III" <wak@google.com>
Date: Tue, 3 Jan 2017 15:13:47 -0800
Subject: [PATCH 1/1] libcpp: Enforce nix purity

---
 libcpp/macro.c | 104 +++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 101 insertions(+), 3 deletions(-)

diff --git a/libcpp/macro.c b/libcpp/macro.c
index c2515534504..6a72d9a777b 100644
--- a/libcpp/macro.c
+++ b/libcpp/macro.c
@@ -227,6 +227,91 @@ static const char * const monthnames[] =
   "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
 };
 
+char **split_path(char *file) {
+	size_t num_separators = 2;
+	char **ret = NULL;
+	size_t i = 0;
+	size_t curr_part = 0;
+
+	for (i = 0; file[i] != '\0'; ++i)
+		if (file[i] == '/')
+			++num_separators;
+
+	ret = malloc(sizeof(char*) * num_separators);
+	ret[curr_part++] = file;
+	for (i = 0; file[i] != '\0'; ++i)
+		if (file[i] == '/') {
+			file[i] = '\0';
+			ret[curr_part++] = &file[i+1];
+		}
+	ret[curr_part] = NULL;
+
+	return ret;
+}
+
+char *copy_string(const char *str) {
+	size_t str_len = strlen(str) + 1;
+	return strncpy(malloc(sizeof(char) * str_len), str, str_len);
+}
+
+char *remove_build_top(const char *file) {
+	const char *build_home = getenv("NIX_BUILD_TOP");
+	char *ret = copy_string(file);
+	size_t ret_pos = 0;
+	char **file_list = NULL;
+	size_t file_max = 0;
+	ssize_t file_pos = 0;
+	char *top_dir = NULL;
+	char **top_list = NULL;
+	ssize_t top_pos = 0;
+	size_t top_max = 0;
+
+	if (build_home == NULL)
+		goto no_home;
+
+	top_dir = copy_string(build_home);
+	file_list = split_path(ret);
+	top_list = split_path(top_dir);
+
+	for (; file_list[file_pos+1] != NULL; ++file_pos);
+	file_max = file_pos;
+	for (; top_list[top_pos+1] != NULL; ++top_pos);
+	top_max = top_pos;
+
+	for (; file_pos >= 0; --file_pos) {
+		char *fn = file_list[file_pos];
+		if ((file_pos != 0 && fn[0] == '\0')
+			|| strcmp(".", fn) == 0) {
+			file_list[file_pos] = NULL;
+		} else if (top_pos < top_max && strcmp("..", fn) == 0) {
+			file_list[file_pos] = NULL;
+			++top_pos;
+		} else if (top_pos >= 0 && strcmp(fn, top_list[top_pos]) == 0) {
+			file_list[file_pos] = NULL;
+			--top_pos;
+		}
+	}
+
+	for (file_pos = 0; file_pos <= file_max; ++file_pos) {
+		char *fn = file_list[file_pos];
+		size_t inner_pos = 0;
+		if (fn == NULL)
+			continue;
+		for (; fn[inner_pos] != '\0'; ++inner_pos)
+			ret[ret_pos++] = fn[inner_pos];
+		if (file_pos != file_max)
+			ret[ret_pos++] = '/';
+	}
+	ret[ret_pos] = '\0';
+
+done:
+	free(top_dir);
+	free(file_list);
+	free(top_list);
+no_home:
+	return ret;
+}
+
 /* Helper function for builtin_macro.  Returns the text generated by
    a builtin macro. */
 const uchar *
@@ -235,6 +320,12 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 {
   const uchar *result = NULL;
   linenum_type number = 1;
+  bool enforce_purity = false;
+  const char *enforce_purity_str = getenv("NIX_ENFORCE_PURITY");
+  const char *build_top = getenv("NIX_BUILD_TOP");
+
+  enforce_purity = enforce_purity_str != NULL
+      && strcmp("1", enforce_purity_str) == 0;
 
   switch (node->value.builtin)
     {
@@ -245,7 +336,7 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 
     case BT_TIMESTAMP:
       {
-	if (CPP_OPTION (pfile, warn_date_time))
+	if (enforce_purity || CPP_OPTION (pfile, warn_date_time))
 	  cpp_warning (pfile, CPP_W_DATE_TIME, "macro \"%s\" might prevent "
 		       "reproducible builds", NODE_NAME (node));
 
@@ -264,6 +355,8 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 		struct stat *st = _cpp_get_file_stat (file);
 		if (st)
 		  tb = localtime (&st->st_mtime);
+		if (enforce_purity)
+		  tb = 1;
 		if (tb)
 		  {
 		    char *str = asctime (tb);
@@ -301,11 +394,15 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 	    if (!name)
 	      abort ();
 	  }
+	if (enforce_purity)
+	  name = remove_build_top(name);
 	len = strlen (name);
 	buf = _cpp_unaligned_alloc (pfile, len * 2 + 3);
 	result = buf;
 	*buf = '"';
 	buf = cpp_quote_string (buf + 1, (const unsigned char *) name, len);
+	if (enforce_purity)
+	  free(name);
 	*buf++ = '"';
 	*buf = '\0';
       }
@@ -345,7 +442,7 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 
     case BT_DATE:
     case BT_TIME:
-      if (CPP_OPTION (pfile, warn_date_time))
+      if (enforce_purity || CPP_OPTION (pfile, warn_date_time))
 	cpp_warning (pfile, CPP_W_DATE_TIME, "macro \"%s\" might prevent "
 		     "reproducible builds", NODE_NAME (node));
       if (pfile->date == NULL)
@@ -364,7 +461,8 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,
 	  tt = time(NULL);
 	  if (tt != (time_t)-1 || errno == 0)
 	    tb = localtime (&tt);
-
+	  if (enforce_purity)
+	    tb = 1;
 	  if (tb)
 	    {
 	      pfile->date = _cpp_unaligned_alloc (pfile,
-- 
2.11.0

