From 439af985ffaf7da16675b6ec0f451118a4ceaa90 Mon Sep 17 00:00:00 2001
From: "William A. Kennington III" <william@wkennington.com>
Date: Wed, 1 Feb 2017 09:16:22 -0800
Subject: [PATCH] debuginfo: Remove nix build dir impurities

---
 src/librustc_trans/debuginfo/metadata.rs | 24 +++++++++++++++++++++---
 1 file changed, 21 insertions(+), 3 deletions(-)

diff --git a/src/librustc_trans/debuginfo/metadata.rs b/src/librustc_trans/debuginfo/metadata.rs
index 4bb34850e0..6e4ed374c2 100644
--- a/src/librustc_trans/debuginfo/metadata.rs
+++ b/src/librustc_trans/debuginfo/metadata.rs
@@ -42,6 +42,7 @@ use util::common::path2cstr;
 use libc::{c_uint, c_longlong};
 use std::ffi::CString;
 use std::fmt::Write;
+use std::env;
 use std::path::Path;
 use std::ptr;
 use std::rc::Rc;
@@ -661,6 +662,19 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
     metadata
 }
 
+fn remap_path(path: &str) -> String {
+    if let Ok(ref enforce_purity) = env::var("NIX_ENFORCE_PURITY") {
+        if "1" == enforce_purity {
+            if let Ok(ref old) = env::var("NIX_BUILD_TOP") {
+                if path.starts_with(old) {
+                    return "/no-such-path".to_string() + &path[old.len()..];
+                }
+            }
+        }
+    }
+    path.to_string()
+}
+
 pub fn file_metadata(cx: &CrateContext, path: &str, full_path: &Option<String>) -> DIFile {
     // FIXME (#9639): This needs to handle non-utf8 paths
     let work_dir = cx.sess().working_dir.to_str().unwrap();
@@ -673,7 +687,9 @@ pub fn file_metadata(cx: &CrateContext, path: &str, full_path: &Option<String>)
             }
         });
 
-    file_metadata_(cx, path, file_name, &work_dir)
+    let remap_file_name = remap_path(file_name);
+    let remap_dir = remap_path(work_dir);
+    file_metadata_(cx, path, &remap_file_name, &remap_dir)
 }
 
 pub fn unknown_file_metadata(cx: &CrateContext) -> DIFile {
@@ -763,7 +779,7 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,
                              debug_context: &CrateDebugContext,
                              sess: &Session)
                              -> DIDescriptor {
-    let work_dir = &sess.working_dir;
+    let work_dir = sess.working_dir.to_str().unwrap();
     let compile_unit_name = match sess.local_crate_source_file {
         None => fallback_path(scc),
         Some(ref abs_path) => {
@@ -785,12 +801,14 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,
         }
     };
 
+    let work_dir = remap_path(work_dir);
+
     debug!("compile_unit_metadata: {:?}", compile_unit_name);
     let producer = format!("rustc version {}",
                            (option_env!("CFG_VERSION")).expect("CFG_VERSION"));
 
     let compile_unit_name = compile_unit_name.as_ptr();
-    let work_dir = path2cstr(&work_dir);
+    let work_dir = CString::new(work_dir).unwrap();
     let producer = CString::new(producer).unwrap();
     let flags = "\0";
     let split_name = "\0";
-- 
2.11.0

