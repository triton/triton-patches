From 854d31c7a8f035cf2029cc8b261233f638118701 Mon Sep 17 00:00:00 2001
From: "William A. Kennington III" <william@wkennington.com>
Date: Sun, 12 Aug 2018 17:13:24 -0700
Subject: [PATCH 09/10] builtin:fetchurl: Support multiple urls

---
 corepkgs/fetchurl.nix             |  7 +++----
 src/libstore/builtins/fetchurl.cc | 34 ++++++++++++++++++++++++++++++-
 2 files changed, 36 insertions(+), 5 deletions(-)

diff --git a/corepkgs/fetchurl.nix b/corepkgs/fetchurl.nix
index 0ce1bab1..be3d62f7 100644
--- a/corepkgs/fetchurl.nix
+++ b/corepkgs/fetchurl.nix
@@ -1,5 +1,5 @@
 { system ? "" # obsolete
-, url
+, url ? "", urls ? [ ]
 , md5 ? "", sha1 ? "", sha256 ? "", sha512 ? ""
 , outputHash ?
     if sha512 != "" then sha512 else if sha1 != "" then sha1 else if md5 != "" then md5 else sha256
@@ -17,7 +17,7 @@ derivation {
   inherit outputHashAlgo outputHash;
   outputHashMode = if unpack || executable then "recursive" else "flat";
 
-  inherit name url executable unpack;
+  inherit name executable unpack;
 
   system = "builtin";
 
@@ -32,6 +32,5 @@ derivation {
     "http_proxy" "https_proxy" "ftp_proxy" "all_proxy" "no_proxy"
   ];
 
-  # To make "nix-prefetch-url" work.
-  urls = [ url ];
+  urls = (if url != "" then [ url ] else [ ]) ++ urls;
 }
diff --git a/src/libstore/builtins/fetchurl.cc b/src/libstore/builtins/fetchurl.cc
index 454ea56c..6b62d4b9 100644
--- a/src/libstore/builtins/fetchurl.cc
+++ b/src/libstore/builtins/fetchurl.cc
@@ -69,7 +69,39 @@ void builtinFetchurl(const BasicDerivation & drv, const std::string & netrcData)
             }
 
     /* Otherwise try the specified URL. */
-    fetch(mainUrl);
+    std::vector<std::string> urls;
+    auto urli = drv.env.find("url");
+    if (urli != drv.env.end() && urli->second.size() > 0)
+        urls.push_back(urli->second);
+    auto urlsi = drv.env.find("urls");
+    if (urlsi != drv.env.end())
+    {
+        size_t url_begin = 0;
+        while (true)
+        {
+            size_t separator = urlsi->second.find(' ', url_begin);
+            if (separator == std::string::npos)
+                separator = urlsi->second.size();
+            if (url_begin < separator)
+                urls.push_back(urlsi->second.substr(url_begin, separator - url_begin));
+            if (separator == urlsi->second.size())
+                break;
+            url_begin = separator + 1;
+        }
+    }
+
+    for (auto url : urls)
+        debug(format("builtin:fetchurl using url: %1%") % url);
+
+    for (auto url : urls)
+        try {
+            fetch(url);
+            return;
+        } catch (Error & e) {
+            debug(e.what());
+        }
+
+    throw Error("Failed to fetch data, maybe missing URLs.");
 }
 
 }
-- 
2.19.0.605.g01d371f741-goog

