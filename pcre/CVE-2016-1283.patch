Index: testdata/testinput2
===================================================================
--- testdata/testinput2	(revision 1635)
+++ testdata/testinput2	(revision 1636)
@@ -4239,4 +4239,6 @@
     9010
     abcd
      
+/((?J)(?'R'(?'R'(?'R'(?'R'(?'R'(?|(\k'R'))))))))/
+
 /-- End of testinput2 --/
Index: testdata/testoutput2
===================================================================
--- testdata/testoutput2	(revision 1635)
+++ testdata/testoutput2	(revision 1636)
@@ -14665,4 +14665,6 @@
   0     ^    0
 No match
      
+/((?J)(?'R'(?'R'(?'R'(?'R'(?'R'(?|(\k'R'))))))))/
+
 /-- End of testinput2 --/
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 1635)
+++ ChangeLog	(revision 1636)
@@ -53,6 +53,13 @@
 13. A pattern that included (*ACCEPT) in the middle of a sufficiently deeply
     nested set of parentheses of sufficient size caused an overflow of the
     compiling workspace (which was diagnosed, but of course is not desirable).
+    
+14. And yet another buffer overflow bug involving duplicate named groups, this 
+    time nested, with a nested back reference. Yet again, I have just allowed 
+    for more memory, because anything more needs all the refactoring that has 
+    been done for PCRE2. An example pattern that provoked this bug is:
+    /((?J)(?'R'(?'R'(?'R'(?'R'(?'R'(?|(\k'R'))))))))/ and the bug was 
+    registered as CVE-2016-1283. 
 
 
 Version 8.38 23-November-2015
Index: pcre_compile.c
===================================================================
--- pcre_compile.c	(revision 1635)
+++ pcre_compile.c	(revision 1636)
@@ -7311,7 +7311,12 @@
           so far in order to get the number. If the name is not found, leave
           the value of recno as 0 for a forward reference. */
 
-          else
+          /* This patch (removing "else") fixes a problem when a reference is
+          to multiple identically named nested groups from within the nest.
+          Once again, it is not the "proper" fix, and it results in an
+          over-allocation of memory. */
+
+          /* else */
             {
             ng = cd->named_groups;
             for (i = 0; i < cd->names_found; i++, ng++)
